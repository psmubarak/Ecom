pipeline{
    agent{label'maven'}

environment {
    PATH = "/OPT/apache-maven-3,9.4 /bin:$path"
}
stages{
    stage('Checkout') {
            steps {
                checkout scm 
            }
        }
    stage('build') {
             steps{
                echo"-----build stated ----"
                sh 'mvn clean deploy -Dmaven.test.skip=true'
                echo "--------build completed ---"

            }
        }
    stage('test'){
              steps{
                echo "------unit test started -----"
                sh'mvn surefile-report:report'
                echo "-------unit test completed ---"
                
              }
       }    
    stage('sonarQube analysis'){
    environment{
        scannerHome = 'namg-snor-scanner'//sonar scanner name should be as what we have defined in the tool.
    withsonarQubeEnv{'namg-sonarqube-server'}{
        sh "${scannerhome}/bon/sonar-scanner"//this is going to communicate with our sonrqube server and send the analysis report.
    }
               } 
    } 
    stage('Quality gate'){
        script {
            timeout(time:1,unit:'hours'{
                def qg=waitForQualityGate()
                if(qg.status !='ok')
                error" pipeline aborted due to quality gara failure" ${qg.status}
            }
            )
        }
    } 
    def registry ='http://-----.jfrog.io'
    stage("jar publish"){
      script{
             echo '<--------jarpublish start------->'
              def server = Artifactory.newserver url:registry+"/artifactory", credentails:"ogartifact-credentials"
              def properties ="buildid=${env.BUILD-ID},commitid=${GIT_COMMIT}";
              def uploadspec ="""{
                       "files":[
                         {
                          "pattern": "jarstaging/(*)",
                          "target": "libs-release-local/{1}",
                          "flat": "false",  
                          "props": "${properties}",
                          "exclusions": ["*shell","*.md5"] 
                          }  
                               ]               
                                 }"""
             def buildInfo = server.upload(uploadspec)
             buildInfo.env.collect()
             server.publishbuildInfo(buildInfo)
             ech0'<-------------jarpublish Ended------------->' 
             }    

     }
   stage("Docker build")
       script{
         echo'-------------Docker build start---------'
         app = docker.build(imageName+":"+version)
         echo'-------------Docker build ends---------'   
            }
    stage ("Docker publish"){
        script{
            echo'-------------Docker pulish start---------'
            docker.withRegistry(registry, 'jfrogartifact-credentils')
            {
            app.push()
            }
            echo'-------------Docker pulish ended---------'
            }
    }
}

}